test = dt$avg_n[dt$avg_n > 0]
test
sample_test = sample(c(min(test),max(test)),10)
sample_test = sample(10,c(min(test),max(test)))
sample_test = sample(10,c(min(test),max(test)),replace=TRUE)
sample_test = sample(10,c(min(test),max(test)),replace=TRUE)
sample_test
sample_test = sample(c(min(test):max(test)),10,replace=TRUE)
sample_test
sample_test = sample(c(min(test):max(test)),30,replace=TRUE)
sample_test
test
test = dt$avg_n[dt$avg_n > 0]
sample_test = sample(min(test):max(test),30,replace=TRUE)
sample_test
range_w_pt <- (max(sample_test) - min(sample_test))/5
n_category = ifelse(sample_test > 0 & sample_test <= range_w_pt, 1,
ifelse(sample_test > range_w_pt & sample_test <= range_w_pt*2, 2,
ifelse(sample_test > range_w_pt*2 & sample_test <= range_w_pt*3, 3,
ifelse(sample_test > range_w_pt*3 & sample_test <= range_w_pt*4, 4, 5))))
n_category <- factor(n_category, levels = c(1,2,3,4,5), labels = c("매우낮음","낮음","보통","높음","매우높음"))
n_category
n_category %>% table()
test = dt$avg_n[dt$avg_n > 0]
sample_test = sample(min(test):max(test),30,replace=TRUE)
range_w_pt <- (max(sample_test) - min(sample_test))/5
n_category = ifelse(sample_test > 0 & sample_test <= range_w_pt, 1,
ifelse(sample_test > range_w_pt & sample_test <= range_w_pt*2, 2,
ifelse(sample_test > range_w_pt*2 & sample_test <= range_w_pt*3, 3,
ifelse(sample_test > range_w_pt*3 & sample_test <= range_w_pt*4, 4, 5))))
n_category <- factor(n_category, levels = c(1,2,3,4,5), labels = c("매우낮음","낮음","보통","높음","매우높음"))
n_category %>% table()
sample_test = sample(max(test),30,replace=TRUE)
range_w_pt <- (max(sample_test) - min(sample_test))/5
n_category = ifelse(sample_test > 0 & sample_test <= range_w_pt, 1,
ifelse(sample_test > range_w_pt & sample_test <= range_w_pt*2, 2,
ifelse(sample_test > range_w_pt*2 & sample_test <= range_w_pt*3, 3,
ifelse(sample_test > range_w_pt*3 & sample_test <= range_w_pt*4, 4, 5))))
n_category <- factor(n_category, levels = c(1,2,3,4,5), labels = c("매우낮음","낮음","보통","높음","매우높음"))
n_category %>% table()
sample_test
d[,buld_category := ifelse(buld_cd == 1000, "단독주택",
ifelse(buld_cd == 2000, "공동주택",
ifelse(buld_cd == 3000, "제1종근린생활시설",
ifelse(buld_cd == 4000, "제2종근린생활시설",
ifelse(buld_cd == 5000, "문화및집회시설",
ifelse(buld_cd == 6000, "종교시설",
ifelse(buld_cd == 7000, "판매시설",
ifelse(buld_cd == 8000, "운수시설",
ifelse(buld_cd == 9000, "의료시설",
ifelse(buld_cd == 10000, "교육연구시설",
ifelse(buld_cd == 11000, "노유자시설",
ifelse(buld_cd == 12000, "수련시설",
ifelse(buld_cd == 13000, "운동시설",
ifelse(buld_cd == 14000, "업무시설",
ifelse(buld_cd == 15000, "숙박시설",
ifelse(buld_cd == 16000, "위락시설",
ifelse(buld_cd == 17000, "공장",
ifelse(buld_cd == 18000, "창고시설",
ifelse(buld_cd == 19000, "위험물저장및처리시설",
ifelse(buld_cd == 20000, "자동차관련시설",
ifelse(buld_cd == 21000, "동식물관련시설",
ifelse(buld_cd == 22000, "분뇨쓰레기처리시설",
ifelse(buld_cd == 23000, "교정및군사시설",
ifelse(buld_cd == 24000, "방송통신시설",
ifelse(buld_cd == 25000, "발전시설",
ifelse(buld_cd == 26000, "묘지관련시설",
ifelse(buld_cd == 27000, "관광휴게시설",
ifelse(buld_cd == 29000, "장례식장","건물없음"))))))))))))))))))))))))))))]
rm(list = ls()) # 메모리에 올라와 있는 객체 삭제
#필요한 패키지 설치 및 부착
source('C:/Users/lime/Desktop/공공 와이파이 우선 설치지역 도출 CD 파일/modeldata/wifi/00.R_script/00.Install_Packages.R')
###############################
#        군 집 분 석          # -----
###############################
#데이터 불러오기
#grid <- fread("01.Data/01.jn_data_set.csv", stringsAsFactors = F) #군집분석 결과를 조인할 파일
#clst_dt <- fread("01.Data/02.data_clustering.csv", stringsAsFactors = F) #군집분석을 실시할 파일
load("C:/Users/lime/Desktop/공공 와이파이 우선 설치지역 도출 CD 파일/modeldata/wifi/02.RData/00.file_import.RData")
clst_dt <- clst_dt[complete.cases(clst_dt),] #결측값이 없는 데이터만 선택
names(clst_dt) <- c("spo_cd", "m10","m20", "m30", "m40", "m50", "m60", "w10", "w20", "w30", "w40", "w50", "w60",
paste0("t",seq(0,23,1)), "mon", "tus", "wed", "thu", "fri", "sat", "sun")  #변수명이 너무 길기 때문에 원활한 분석을 위해 변수명 변경
clst_dt <- as.data.table(clst_dt) #데이터 처리가 빠른 데이터테이블 형태로 변환
head(clst_dt) #데이터 확인
#성/연령별 군집
set.seed(123)  #군집분석은 초기값이 어떻게 제공되는가에 따라서 값이 변화하기 때문에 난수값 고정 후 분석시작
clst_list1 = list()
for(k in 1:15){
clst_list1[[k]] = kmeans(clst_dt[,m10:w60], centers = k) # 1개에서 15개의 군집을 만들어 보면서 통계치 확인
}
ssT1 <- getElement(clst_list1[[1]], "totss")
ssB1 <- sapply(clst_list1, function(x){getElement(x, "betweenss")})
ssW1 <- sapply(clst_list1, function(x){getElement(x,"tot.withinss")})
plot(1:15, ssB1, xlab = "number of clusters", ylab = "between group sum of square")
lines(1:15, ssB1)
plot(1:15, ssW1, xlab = "number of cluster", ylab = "within group sum of square")
lines(1:15, ssW1)
#그림으로 저장
png("03.Image/00.cluster_s.png", width = 800, height = 600)
par(mfrow = c(1,2))
plot(1:15, ssB1, xlab = "number of clusters", ylab = "between group sum of square")
lines(1:15, ssB1)
plot(1:15, ssW1, xlab = "number of cluster", ylab = "within group sum of square")
lines(1:15, ssW1)
dev.off()
#그래프를 통해 군집간 변량이 최대화되면서 군집내 변량이 최소화 되는 군집의 개수 또한, 가장 경제적인 군집수를 확인(기울기의 각도 완만해지는 구간)
#시간대별 군집
clst_list2 = list()
for(k in 1:15){
clst_list2[[k]] = kmeans(clst_dt[,t0:t23], center = k)
}
ssT2 <- getElement(clst_list2[[1]], "totss")
ssB2 <- sapply(clst_list2, function(x){getElement(x, "betweenss")})
ssW2 <- sapply(clst_list2,function(x){getElement(x,"tot.withinss")})
plot(1:15, ssB2, xlab = "number of clusters", ylab = "between group sum of square")
lines(1:15, ssB2)
plot(1:15, ssW2, xlab = "number of cluster", ylab = "within group sum of square")
lines(1:15, ssW2)
#그림으로 저장
png("03.Image/01.cluster_t.png", width = 800, height = 600)
par(mfrow = c(1,2))
plot(1:15, ssB2, xlab = "number of clusters", ylab = "between group sum of square")
lines(1:15, ssB2)
plot(1:15, ssW2, xlab = "number of cluster", ylab = "within group sum of square")
lines(1:15, ssW2)
dev.off()
#요일별 군집
clst_list3 = list()
for(k in 1:15){
clst_list3[[k]] = kmeans(clst_dt[,mon:sun], center = k)
}
ssT3 <- getElement(clst_list3[[1]], "totss")
ssB3 <- sapply(clst_list3, function(x){getElement(x, "betweenss")})
ssW3 <- sapply(clst_list3,function(x){getElement(x,"tot.withinss")})
plot(1:15, ssB3, xlab = "number of clusters", ylab = "between group sum of square")
lines(1:15, ssB3)
plot(1:15, ssW3, xlab = "number of cluster", ylab = "within group sum of square")
lines(1:15, ssW3)
#그림으로 저장
png("03.Image/02.cluster_w.png", width = 800, height = 600)
par(mfrow = c(1,2))
plot(1:15, ssB3, xlab = "number of clusters", ylab = "between group sum of square")
lines(1:15, ssB3)
plot(1:15, ssW3, xlab = "number of cluster", ylab = "within group sum of square")
lines(1:15, ssW3)
dev.off()
## 성/연령별, 시간대별, 요일별 군집이 3, 4개에서 군집간 변량의 변화량이 가파르게 유지되고, 군집내 변량이 빠르게 작게 변화하는 것으로 나타나 군집 개수는 3개 혹은 4개 중 결정
###############################
#        군집 수 결정         # -----
###############################
# 성/연령별 군집 결정_군집 3개일 경우 -----
temp <- clst_dt
temp[,clst_s := clst_list1[[3]]$cluster]
temp$clst_s <- as.factor(temp$clst_s)
p1 <- temp %>%
gather(SAP, N, m10:w60) %>%
select(spo_cd, clst_s, SAP, N) %>%
group_by(clst_s,SAP) %>%
summarise(avg = mean(N)) %>%
ggplot(aes(x = SAP, y = avg, color = clst_s, group = clst_s)) + geom_line(alpha = 0.3, size = 1) +
geom_point(alpha = 0.7, size = 1.5) + facet_grid(clst_s ~.) + theme_bw()
p1
#그림으로 저장
ggsave("03.Image/03.comparison_cluster_s.png", plot = p1, device = "png")
# 성/연령별 군집 결정_군집 4개일 경우 -----
temp <- clst_dt
temp[,clst_s := clst_list1[[4]]$cluster]
temp$clst_s <- as.factor(temp$clst_s)
p2 <- temp %>%
gather(SAP, N, m10:w60) %>%
select(spo_cd, clst_s, SAP, N) %>%
group_by(clst_s,SAP) %>%
summarise(avg = mean(N)) %>%
ggplot(aes(x = SAP, y = avg, color = clst_s, group = clst_s)) + geom_line(alpha = 0.3, size = 1) +
geom_point(alpha = 0.7, size = 1.5) + facet_grid(clst_s ~.) + theme_bw()
#그림으로 저장
ggsave("03.Image/04.comparison_cluster_s.png", plot = p2, device = "png")
# 시간대별 군집 결정_군집 3개일 경우 -----
temp[,clst_t := clst_list2[[3]]$cluster]
temp$clst_t <- as.factor(temp$clst_t)
p3 <- temp %>%
gather(TP, N, t0:t23) %>%
select(spo_cd, clst_t, TP, N) %>%
mutate(TP = factor(TP, levels = c(paste0("t",seq(0,23,1))))) %>%
group_by(clst_t, TP) %>%
summarise(avg = mean(N)) %>%
ggplot(aes(x = TP, y = avg, color = clst_t, group = clst_t)) + geom_line(alpha = 0.3, size = 1) +
geom_point(alpha = 0.7, size = 1.5) + facet_grid(clst_t ~.)  + theme_bw()
#그림으로 저장
ggsave("03.Image/05.comparison_cluster_t.png", plot = p3, device = "png")
# 시간대별 군집 결정_군집 4개일 경우 -----
temp[,clst_t := clst_list2[[4]]$cluster]
temp$clst_t <- as.factor(temp$clst_t)
p4 <- temp %>%
gather(TP, N, t0:t23) %>%
select(spo_cd, clst_t, TP, N) %>%
mutate(TP = factor(TP, levels = c(paste0("t",seq(0,23,1))))) %>%
group_by(clst_t, TP) %>%
summarise(avg = mean(N)) %>%
ggplot(aes(x = TP, y = avg, color = clst_t, group = clst_t)) + geom_line(alpha = 0.3, size = 1) +
geom_point(alpha = 0.7, size = 1.5) + facet_grid(clst_t ~.)  + theme_bw()
#그림으로 저장
ggsave("03.Image/06.comparison_cluster_t.png", plot = p4, device = "png")
# 요일별 군집 결정_군집 3개일 경우 -----
temp[,clst_w := clst_list3[[3]]$cluster]
temp$clst_w <- as.factor(temp$clst_w)
p5 <- temp %>%
gather(WP, N, mon:sun) %>%
select(spo_cd, clst_w, WP, N) %>%
mutate(WP = factor(WP, levels = c("mon", "tus", "wed", "thu", "fri", "sat", "sun"))) %>%
group_by(clst_w,WP) %>%
summarise(avg = mean(N)) %>%
ggplot(aes(x = WP, y = avg, color = clst_w, group = clst_w)) + geom_line(alpha = 0.3, size = 1) +
geom_point(alpha = 0.7, size = 1.5) + facet_grid(clst_w ~.)  + theme_bw()
#그림으로 저장
ggsave("03.Image/07.comparison_cluster_w.png", plot = p5, device = "png")
# 요일별 군집 결정_군집 4개일 경우 -----
temp[,clst_w := clst_list3[[4]]$cluster]
temp$clst_w <- as.factor(temp$clst_w)
p6 <- temp %>%
gather(WP, N, mon:sun) %>%
select(spo_cd, clst_w, WP, N) %>%
mutate(WP = factor(WP, levels = c("mon", "tus", "wed", "thu", "fri", "sat", "sun"))) %>%
group_by(clst_w,WP) %>%
summarise(avg = mean(N)) %>%
ggplot(aes(x = WP, y = avg, color = clst_w, group = clst_w)) + geom_line(alpha = 0.3, size = 1) +
geom_point(alpha = 0.7, size = 1.5) + facet_grid(clst_w ~.)  + theme_bw()
#그림으로 저장
ggsave("03.Image/08.comparison_cluster_w.png", plot = p6, device = "png")
# 성/연령별 군집은 4개 시간대별, 요일별 군집은 3개로 결정하여 해당 패턴을 데이터에 추가
clst_dt[,clst_s := clst_list1[[4]]$cluster]
clst_dt[,clst_t := clst_list2[[3]]$cluster]
clst_dt[,clst_w := clst_list3[[3]]$cluster]
###############################
#        데이터 전처리        # -----
###############################
#사용할 변수 형태로 변환
clst_dt[,tpp := (t0 + t1 + t2 + t3 + t4 + t5 + t6 + t7 + t8 + t9 + t10 + t11 +
t12 + t13 + t14 + t15 + t16 + t17 + t18 + t19 + t20 + t21 + t22 + t23)/24] #해당 셀의 시간당 유동인구
clst_dt[,wkr := (sat + sun)/(mon + tus + wed + thu + fri + sat + sun)]  #주말/주중 유동인구 비율
#분석용 데이터와 결합
grid %>%
left_join(subset(clst_dt, select = c(spo_cd, clst_s, clst_t, clst_w, tpp, wkr)), by = "spo_cd") -> d
head(d)
#범주화 변수 레이블링
d <- d[complete.cases(d),] #결측값이 없는 데이터만 선택
d <- as.data.table(d)
d$div_tc <- factor(d$div_tc, levels = c(1,2), labels = c("도시", "관광지"))
d$w_pnt <- factor(d$w_pnt, levels = c(1,2), labels = c("wifi","non_wifi"))
d$w_pnt_150m <- factor(d$w_pnt_150m, levels = c(1,2), labels = c("wifi_area", "non_wifi_area"))
#거리변수는 값들의 범위가 너무 크고 해당위치에 존재(0m)와 없음(0)을 분리하여 사용하기 위해서 범주형 변수로 변환
d[,ca_dist_category := ifelse(cal_dist > 0 & cal_dist <= 1000, "0~1km",
ifelse(cal_dist > 1000 & cal_dist <= 2000, "1~2km",
ifelse(cal_dist > 2000 & cal_dist <= 3000, "2~3km",
ifelse(cal_dist > 3000 & cal_dist <= 4000, "3~4km",
ifelse(cal_dist >= 4000, "4km이상",
ifelse(cal_dist < 0, "문화재없음", "문화재"))))))]
d[,pub_dist_category := ifelse(pub_dist > 0 & pub_dist <= 200, "0~200m",
ifelse(pub_dist > 200 & pub_dist <= 400, "200~400m",
ifelse(pub_dist > 400 & pub_dist <= 600, "400~600m",
ifelse(pub_dist > 600 & pub_dist <= 800, "600~800m",
ifelse(pub_dist > 800, "800m이상",
ifelse(pub_dist < 0, "공공건물없음", "공공건물"))))))]
d[,tour_dist_category := ifelse(tou_dist >= 0 & tou_dist < 1000, "0~1km",
ifelse(tou_dist >= 1000 & tou_dist < 2000, "1~2km",
ifelse(tou_dist >= 2000 & tou_dist < 3000, "2~3km",
ifelse(tou_dist >= 3000 & tou_dist < 4000, "3~4km",
ifelse(tou_dist >= 4000, "4km이상",
ifelse(tou_dist < 0, "관광지역없음", "관광지"))))))]
#공공와이파이 사용자가 단순히 움직이는 유동인구가 아니라 체류하면서 사용할 가능성이 높음.
#체류도를 파악할 수 있는 데이터를 해당 격자에 이용건물이 있는지 없는지에 따라서 달라질 수 있다고 판단하여 이를 변수로 추가
d[,buld_category := ifelse(buld_cd == 1000, "단독주택",
ifelse(buld_cd == 2000, "공동주택",
ifelse(buld_cd == 3000, "제1종근린생활시설",
ifelse(buld_cd == 4000, "제2종근린생활시설",
ifelse(buld_cd == 5000, "문화및집회시설",
ifelse(buld_cd == 6000, "종교시설",
ifelse(buld_cd == 7000, "판매시설",
ifelse(buld_cd == 8000, "운수시설",
ifelse(buld_cd == 9000, "의료시설",
ifelse(buld_cd == 10000, "교육연구시설",
ifelse(buld_cd == 11000, "노유자시설",
ifelse(buld_cd == 12000, "수련시설",
ifelse(buld_cd == 13000, "운동시설",
ifelse(buld_cd == 14000, "업무시설",
ifelse(buld_cd == 15000, "숙박시설",
ifelse(buld_cd == 16000, "위락시설",
ifelse(buld_cd == 17000, "공장",
ifelse(buld_cd == 18000, "창고시설",
ifelse(buld_cd == 19000, "위험물저장및처리시설",
ifelse(buld_cd == 20000, "자동차관련시설",
ifelse(buld_cd == 21000, "동식물관련시설",
ifelse(buld_cd == 22000, "분뇨쓰레기처리시설",
ifelse(buld_cd == 23000, "교정및군사시설",
ifelse(buld_cd == 24000, "방송통신시설",
ifelse(buld_cd == 25000, "발전시설",
ifelse(buld_cd == 26000, "묘지관련시설",
ifelse(buld_cd == 27000, "관광휴게시설",
ifelse(buld_cd == 29000, "장례식장","건물없음"))))))))))))))))))))))))))))]
#동부와 읍면부의 인터넷 이용에 있어서 스마트폰 사용에 차이가 있었기 때문에 이를 변수로 추가
d[,emd := ifelse(str_sub(sig_nm, -1) == "군", "읍면부", "동부")]
#와이파이 위치에 따라 공공와이파이 설치지역을 이동하면서 자동으로 접속되는 수를 제어하기 위하여 설치위치를 변수로 추가
d[,lct_w := ifelse(buld_category == "건물없음", "실외", "실내")]
#변환된 변수들의 형태를 범주형으로
d$ca_dist_category <- as.factor(d$ca_dist_category)
d$pub_dist_category <- as.factor(d$pub_dist_category)
d$tour_dist_category <- as.factor(d$tour_dist_category)
d$buld_category <- as.factor(d$buld_category)
d$emd <- as.factor(d$emd)
d$lct_w <- as.factor(d$lct_w)
d$clst_s <- as.factor(d$clst_s)
d$clst_t <- as.factor(d$clst_t)
d$clst_w <- as.factor(d$clst_w)
#와이파이 위치 주변 150m의 셀로 접속자 수를 나누어 접속자 수는 똑같고 서로 다른 패턴을 갖는 변수들이 다수 생성되기 때문에 이를 합쳐서 종속변수로 사용
d[, avg_n := w_avg_pt + w_avg_150m]
#최종 분석 모델을 위해서 변수 선택
dt <- d %>%
select(spo_cd, div_tc, grs_x, grs_y, w_pnt, w_pnt_150m, avg_n, sfp_tt, liv_pp, vsg_gu,
sfp_w, liv_w, vsg_w, cal_w, tou_w, pub_w, tt_w, clst_s, clst_t, clst_w, tpp, wkr,
ca_dist_category, pub_dist_category, tour_dist_category, emd, lct_w, buld_category)
#와이파이 설치 지역이면서 접속자 수를 알고 있는 데이터를 분석모델 트레이닝 데이터로 사용
dt %>%
filter(w_pnt == "wifi" & avg_n > 0) %>%
select(-c(div_tc, w_pnt, w_pnt_150m)) -> model_dt
#모델을 통해 예측할 데이터
dt %>%
filter(div_tc == "관광지") %>%
filter(w_pnt != "wifi" | w_pnt_150m != "wifi_area") %>%
select(-c(div_tc, w_pnt, w_pnt_150m)) -> test_dt
#접속자 수 정보를 범주화 변수로 변경
model_dt <- as.data.table(model_dt)
range_w_pt <- (max(model_dt$avg_n) - min(model_dt$avg_n))/5
model_dt[,n_category := ifelse(avg_n > 0 & avg_n <= range_w_pt, 1,
ifelse(avg_n > range_w_pt & avg_n <= range_w_pt*2, 2,
ifelse(avg_n > range_w_pt*2 & avg_n <= range_w_pt*3, 3,
ifelse(avg_n > range_w_pt*3 & avg_n <= range_w_pt*4, 4, 5))))]
model_dt$n_category <- factor(model_dt$n_category, levels = c(1,2,3,4,5), labels = c("매우낮음","낮음","보통","높음","매우높음"))
#업샘플링을 통해서 가장 많은 개수를 가진 '매우 낮음' 항목 수에 나머지 항목의 수를 맞춤
model_dt_resample <- upSample(model_dt, model_dt$n_category)
model_dt_resample <- model_dt_resample[,-27]
model_dt %>%
ggplot(aes(x = n_category)) + geom_bar()
model_dt_resample %>%
ggplot(aes(x = n_category)) + geom_bar()
str(model_dt_resample)
###############################
#             EDA             # -----
###############################
#와이파이 설치 위치별 접속자 수
p7 <- ggplot(data = model_dt_resample) + geom_mosaic(aes(weight = tpp, x =product(lct_w), fill = n_category))+
xlab("") + ylab("")
#동부/읍면부별 접속자 수
p8 <- ggplot(data = model_dt_resample) + geom_mosaic(aes(weight = wkr, x = product(emd), fill = n_category)) +
xlab("") + ylab("")
#취약계층 지수별 접속자 수
p9 <- ggplot(data = model_dt_resample) + geom_mosaic(aes(weight = sfp_tt, x = product(vsg_w), fill = n_category)) +
xlab("") + ylab("")
#공공건물과의 거리ㅂ 접속자 수
p10 <- ggplot(data = model_dt_resample) + geom_mosaic(aes(weight = sfp_tt, x = product(pub_dist_category), fill = n_category)) +
xlab("") + ylab("")
#요일군집별 접속자 수
p11 <- ggplot(data = model_dt_resample) + geom_mosaic(aes(x = product(clst_w), fill = n_category)) + xlab("") + ylab("")
ggsave("03.Image/09.mosaic_lct.png", plot = p7, device = "png")
ggsave("03.Image/10.mosaic_emd.png", plot = p8, device = "png")
ggsave("03.Image/11.mosaic_vsg_w.png", plot = p9, device = "png")
ggsave("03.Image/12.mosaic_pub_dist.png", plot = p10, device = "png")
ggsave("03.Image/13.mosaic_clst_w.png", plot = p11, device = "png")
###############################
#        모델별 비교          # -----
###############################
#교차검증을 위한 트레이닝 데이터와 테스트 데이터 분리
set.seed(1)
idx_res <- createDataPartition(model_dt_resample$n_category, p = 0.7)[[1]]
tr_res <- model_dt_resample[idx_res,]
te_res <- model_dt_resample[-idx_res,]
#다항로지스틱 회귀분석 -----
set.seed(123)
m3_rv <- multinom(n_category ~., data = subset(tr_res, select = -c(spo_cd, avg_n, grs_x, grs_y)), family = "binomial")
te_res$pred_glm <- predict(m3_rv, newdata = te_res)
#랜덤포레스트 -----
rf_rv <- caret::train(n_category ~., data = subset(tr_res, select = -c(spo_cd, avg_n, grs_x, grs_y)),
method = "rf", ntree = 1000, importance = T,
trControl = trainControl(method = "cv", number = 2, savePredictions = T))
te_res$pred_rf <- predict(rf_rv, newdata = te_res)
#xg부스트(트리형) -----
xgbt_rv <- caret::train(n_category ~., data = subset(tr_res, select = -c(spo_cd, avg_n, grs_x, grs_y)),
method = "xgbTree", objective = "reg:squarederror",
trControl = trainControl(method = "cv", number = 2, savePredictions = T))
te_res$pred_xgbt <- predict(xgbt_rv, newdata = te_res)
#신경망 모형 -----
nnet_rv <- caret::train(n_category ~., data = subset(tr_res, select = -c(spo_cd, avg_n, grs_x, grs_y)),
method = "nnet", importance = T,
trControl = trainControl(method = "cv", number = 2, savePredictions = T))
te_res$pred_nnet <- predict(nnet_rv, newdata = te_res)
#의사결정나무 -----
rpart_rv <- caret::train(n_category ~., data = subset(tr_res, select = -c(spo_cd, avg_n, grs_x, grs_y)),
method = "rpart", tuneLength = 10,
trControl = trainControl(method = "cv", number = 2, savePredictions = T))
te_res$pred_rpart <- predict(rpart_rv, newdata = te_res)
# ROC 커브 확인
roc_glm <- multiclass.roc(as.numeric(te_res$n_category), as.numeric(te_res$pred_glm))
rs1 <- roc_glm[['rocs']]
plot.roc(rs1[[1]])
sapply(2:length(rs1), function(i){lines.roc(rs1[[i]], col = i)})
roc_rf <- multiclass.roc(as.numeric(te_res$n_category), as.numeric(te_res$pred_rf))
rs2 <- roc_rf[['rocs']]
plot.roc(rs2[[1]])
sapply(2:length(rs2), function(i){lines.roc(rs2[[i]], col = i)})
roc_xgbt <- multiclass.roc(as.numeric(te_res$n_category), as.numeric(te_res$pred_xgbt))
rs3 <- roc_xgbt[['rocs']]
plot.roc(rs3[[1]])
sapply(2:length(rs3), function(i){lines.roc(rs3[[i]], col = i)})
roc_nnet <- multiclass.roc(as.numeric(te_res$n_category), as.numeric(te_res$pred_nnet))
rs4 <- roc_nnet[['rocs']]
plot.roc(rs4[[1]])
sapply(2:length(rs4), function(i){lines.roc(rs4[[i]], col = i)})
roc_rpart <- multiclass.roc(as.numeric(te_res$n_category), as.numeric(te_res$pred_rpart))
rs5 <- roc_rpart[['rocs']]
plot.roc(rs5[[1]])
sapply(2:length(rs5), function(i){lines.roc(rs5[[i]], col = i)})
#그림으로 저장(다항로지스틱 회귀분석, 랜덤포레스트, xgboost, 신경망모형, 의사결정나무 순으로 그래프 생성)
png("03.Image/14.roc_curve.png", width = 1024, height = 600)
par(mfrow = c(2,3))
plot.roc(rs1[[1]])
sapply(2:length(rs1), function(i){lines.roc(rs1[[i]], col = i)})
plot.roc(rs2[[1]])
sapply(2:length(rs2), function(i){lines.roc(rs2[[i]], col = i)})
plot.roc(rs3[[1]])
sapply(2:length(rs3), function(i){lines.roc(rs3[[i]], col = i)})
plot.roc(rs4[[1]])
sapply(2:length(rs4), function(i){lines.roc(rs4[[i]], col = i)})
plot.roc(rs5[[1]])
sapply(2:length(rs5), function(i){lines.roc(rs5[[i]], col = i)})
dev.off()
#교차검증을 위한 테스트 데이터로 변경후 예측
confusionMatrix(te_res$n_category, te_res$pred_glm)
confusionMatrix(te_res$n_category, te_res$pred_rf)
confusionMatrix(te_res$n_category, te_res$pred_xgbt)
confusionMatrix(te_res$n_category, te_res$pred_rpart)
confusionMatrix(te_res$n_category, te_res$pred_nnet)
###############################
#       최종모델 선별         # -----
###############################
#실제 관측치를 얼마나 잘 반영하는지에 대한 통계치 recall과 모델의 예측 정확도를 판단하는 precision, 이 두 통계치를 동시에 판단하는 f1 score를 통해 모델 선택
prcs_m3 = c()
prcs_rf = c()
prcs_xgbt = c()
prcs_nnet = c()
prcs_rpart = c()
rcl_m3 = c()
rcl_rf = c()
rcl_xgbt = c()
rcl_nnet = c()
rcl_rpart = c()
for(i in 1:5){
cm_m3 <- confusionMatrix(te_res$n_category, te_res$pred_glm)
cm_rf <- confusionMatrix(te_res$n_category, te_res$pred_rf)
cm_xgbt <- confusionMatrix(te_res$n_category, te_res$pred_xgbt)
cm_nnet <- confusionMatrix(te_res$n_category, te_res$pred_nnet)
cm_rpart <- confusionMatrix(te_res$n_category, te_res$pred_rpart)
prcs_m3[i] <- cm_m3$table[i,i]/sum(cm_m3$table[i,])
prcs_rf[i] <- cm_rf$table[i,i]/sum(cm_rf$table[i,])
prcs_xgbt[i] <- cm_xgbt$table[i,i]/sum(cm_xgbt$table[i,])
prcs_nnet <- cm_nnet$table[i,i]/sum(cm_nnet$table[i,])
prcs_rpart <- cm_rpart$table[i,i]/sum(cm_rpart$table[i,])
rcl_m3[i] <- cm_m3$table[i,i]/sum(cm_m3$table[,i])
rcl_rf[i] <- cm_rf$table[i,i]/sum(cm_rf$table[,i])
rcl_xgbt[i] <- cm_xgbt$table[i,i]/sum(cm_xgbt$table[,i])
rcl_nnet[i] <- cm_nnet$table[i,i]/sum(cm_nnet$table[,i])
rcl_rpart[i] <- cm_rpart$table[i,i]/sum(cm_rpart$table[,i])
comparison_model <- data.frame(avg_precision_glm = mean(prcs_m3),
avg_precision_rf = mean(prcs_rf),
avg_precision_xgbt = mean(prcs_xgbt),
avg_precision_nnet = mean(prcs_nnet),
avg_precision_rpart = mean(prcs_rpart),
avg_recall_glm = mean(rcl_m3),
avg_recall_rf = mean(rcl_rf),
avg_recall_xgbt = mean(rcl_xgbt),
avg_recall_nnet = mean(rcl_nnet),
avg_recall_rpart = mean(rcl_rpart))
print(i)
}
comparison_model
f1_glm <- comparison_model$avg_precision_glm * comparison_model$avg_precision_glm
f1_rf <- comparison_model$avg_precision_rf * comparison_model$avg_recall_rf
f1_xgbt <- comparison_model$avg_precision_xgbt * comparison_model$avg_recall_xgbt
f1_nnet <- comparison_model$avg_precision_nnet * comparison_model$avg_recall_nnet
f1_rpart <- comparison_model$avg_precision_rpart * comparison_model$avg_recall_rpart
f1_glm
f1_rf
f1_xgbt
f1_nnet
f1_rpart
#f1 score가 더 높은 xg부스트를 최종 모델로 선정함
# xg 부스트 모형의 변수 중요도(10순위까지)
var_xgbt <- varImp(xgbt_rv)
var_dt <- data.frame(variance = rownames(var_xgbt$importance), impt = var_xgbt$importance)
rownames(var_dt) <- 1:nrow(var_dt)
colnames(var_dt) <- c("var", "impt")
var_dt <- var_dt[1:10,]
var_plot <- ggplot(var_dt, aes(x = reorder(var, -impt), y = impt, fill = var), colour = var) + geom_bar(stat = "identity") +
xlab("") + ylab("") + theme(axis.text.x=element_text(angle=40))
var_plot
#그림으로 저장
ggsave("03.Image/15.varplot.png", plot = var_plot, device = "png")
###############################
#    최종 모델을 통한 예측    # -----
###############################
#와이파이 미설치 지역에 사용량 예측
test_dt$n_xgbt <- predict(xgbt_rv, newdata = test_dt)
#예측된 결과를 파일로 저장
write.csv(test_dt, "01.Data/03.prediction_jn_wifi.csv", row.names = F)
