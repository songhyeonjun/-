select(spo_cd, div_tc, grs_x, grs_y, w_pnt, w_pnt_150m, avg_n, sfp_tt, liv_pp, vsg_gu,
sfp_w, liv_w, vsg_w, cal_w, tou_w, pub_w, tt_w, clst_s, clst_t, clst_w, tpp, wkr,
ca_dist_category, pub_dist_category, tour_dist_category, emd, lct_w, buld_category)
#와이파이 설치 지역이면서 접속자 수를 알고 있는 데이터를 분석모델 트레이닝 데이터로 사용
dt %>%
filter(w_pnt == "wifi" & avg_n > 0) %>%
select(-c(div_tc, w_pnt, w_pnt_150m)) -> model_dt
#모델을 통해 예측할 데이터
dt %>%
filter(div_tc == "관광지") %>%
filter(w_pnt != "wifi" | w_pnt_150m != "wifi_area") %>%
select(-c(div_tc, w_pnt, w_pnt_150m)) -> test_dt
#접속자 수 정보를 범주화 변수로 변경
model_dt <- as.data.table(model_dt)
range_w_pt <- (max(model_dt$avg_n) - min(model_dt$avg_n))/5
model_dt[,n_category := ifelse(avg_n > 0 & avg_n <= range_w_pt, 1,
ifelse(avg_n > range_w_pt & avg_n <= range_w_pt*2, 2,
ifelse(avg_n > range_w_pt*2 & avg_n <= range_w_pt*3, 3,
ifelse(avg_n > range_w_pt*3 & avg_n <= range_w_pt*4, 4, 5))))]
model_dt$n_category <- factor(model_dt$n_category, levels = c(1,2,3,4,5), labels = c("매우낮음","낮음","보통","높음","매우높음"))
#업샘플링을 통해서 가장 많은 개수를 가진 '매우 낮음' 항목 수에 나머지 항목의 수를 맞춤
model_dt_resample <- upSample(model_dt, model_dt$n_category)
model_dt_resample <- model_dt_resample[,-27]
model_dt %>%
ggplot(aes(x = n_category)) + geom_bar()
model_dt_resample %>%
ggplot(aes(x = n_category)) + geom_bar()
str(model_dt_resample)
###############################
#             EDA             # -----
###############################
#와이파이 설치 위치별 접속자 수
p7 <- ggplot(data = model_dt_resample) + geom_mosaic(aes(weight = tpp, x =product(lct_w), fill = n_category))+
xlab("") + ylab("")
#동부/읍면부별 접속자 수
p8 <- ggplot(data = model_dt_resample) + geom_mosaic(aes(weight = wkr, x = product(emd), fill = n_category)) +
xlab("") + ylab("")
#취약계층 지수별 접속자 수
p9 <- ggplot(data = model_dt_resample) + geom_mosaic(aes(weight = sfp_tt, x = product(vsg_w), fill = n_category)) +
xlab("") + ylab("")
#공공건물과의 거리ㅂ 접속자 수
p10 <- ggplot(data = model_dt_resample) + geom_mosaic(aes(weight = sfp_tt, x = product(pub_dist_category), fill = n_category)) +
xlab("") + ylab("")
#요일군집별 접속자 수
p11 <- ggplot(data = model_dt_resample) + geom_mosaic(aes(x = product(clst_w), fill = n_category)) + xlab("") + ylab("")
ggsave("03.Image/09.mosaic_lct.png", plot = p7, device = "png")
ggsave("03.Image/10.mosaic_emd.png", plot = p8, device = "png")
ggsave("03.Image/11.mosaic_vsg_w.png", plot = p9, device = "png")
ggsave("03.Image/12.mosaic_pub_dist.png", plot = p10, device = "png")
ggsave("03.Image/13.mosaic_clst_w.png", plot = p11, device = "png")
###############################
#        모델별 비교          # -----
###############################
#교차검증을 위한 트레이닝 데이터와 테스트 데이터 분리
set.seed(1)
idx_res <- createDataPartition(model_dt_resample$n_category, p = 0.7)[[1]]
tr_res <- model_dt_resample[idx_res,]
te_res <- model_dt_resample[-idx_res,]
#다항로지스틱 회귀분석 -----
set.seed(123)
m3_rv <- multinom(n_category ~., data = subset(tr_res, select = -c(spo_cd, avg_n, grs_x, grs_y)), family = "binomial")
te_res$pred_glm <- predict(m3_rv, newdata = te_res)
#랜덤포레스트 -----
rf_rv <- caret::train(n_category ~., data = subset(tr_res, select = -c(spo_cd, avg_n, grs_x, grs_y)),
method = "rf", ntree = 1000, importance = T,
trControl = trainControl(method = "cv", number = 2, savePredictions = T))
te_res$pred_rf <- predict(rf_rv, newdata = te_res)
#xg부스트(트리형) -----
xgbt_rv <- caret::train(n_category ~., data = subset(tr_res, select = -c(spo_cd, avg_n, grs_x, grs_y)),
method = "xgbTree", objective = "reg:squarederror",
trControl = trainControl(method = "cv", number = 2, savePredictions = T))
te_res$pred_xgbt <- predict(xgbt_rv, newdata = te_res)
#신경망 모형 -----
nnet_rv <- caret::train(n_category ~., data = subset(tr_res, select = -c(spo_cd, avg_n, grs_x, grs_y)),
method = "nnet", importance = T,
trControl = trainControl(method = "cv", number = 2, savePredictions = T))
te_res$pred_nnet <- predict(nnet_rv, newdata = te_res)
#의사결정나무 -----
rpart_rv <- caret::train(n_category ~., data = subset(tr_res, select = -c(spo_cd, avg_n, grs_x, grs_y)),
method = "rpart", tuneLength = 10,
trControl = trainControl(method = "cv", number = 2, savePredictions = T))
te_res$pred_rpart <- predict(rpart_rv, newdata = te_res)
# ROC 커브 확인
roc_glm <- multiclass.roc(as.numeric(te_res$n_category), as.numeric(te_res$pred_glm))
rs1 <- roc_glm[['rocs']]
plot.roc(rs1[[1]])
sapply(2:length(rs1), function(i){lines.roc(rs1[[i]], col = i)})
roc_rf <- multiclass.roc(as.numeric(te_res$n_category), as.numeric(te_res$pred_rf))
rs2 <- roc_rf[['rocs']]
plot.roc(rs2[[1]])
sapply(2:length(rs2), function(i){lines.roc(rs2[[i]], col = i)})
roc_xgbt <- multiclass.roc(as.numeric(te_res$n_category), as.numeric(te_res$pred_xgbt))
rs3 <- roc_xgbt[['rocs']]
plot.roc(rs3[[1]])
sapply(2:length(rs3), function(i){lines.roc(rs3[[i]], col = i)})
roc_nnet <- multiclass.roc(as.numeric(te_res$n_category), as.numeric(te_res$pred_nnet))
rs4 <- roc_nnet[['rocs']]
plot.roc(rs4[[1]])
sapply(2:length(rs4), function(i){lines.roc(rs4[[i]], col = i)})
roc_rpart <- multiclass.roc(as.numeric(te_res$n_category), as.numeric(te_res$pred_rpart))
rs5 <- roc_rpart[['rocs']]
plot.roc(rs5[[1]])
sapply(2:length(rs5), function(i){lines.roc(rs5[[i]], col = i)})
#그림으로 저장(다항로지스틱 회귀분석, 랜덤포레스트, xgboost, 신경망모형, 의사결정나무 순으로 그래프 생성)
png("03.Image/14.roc_curve.png", width = 1024, height = 600)
par(mfrow = c(2,3))
plot.roc(rs1[[1]])
sapply(2:length(rs1), function(i){lines.roc(rs1[[i]], col = i)})
plot.roc(rs2[[1]])
sapply(2:length(rs2), function(i){lines.roc(rs2[[i]], col = i)})
plot.roc(rs3[[1]])
sapply(2:length(rs3), function(i){lines.roc(rs3[[i]], col = i)})
plot.roc(rs4[[1]])
sapply(2:length(rs4), function(i){lines.roc(rs4[[i]], col = i)})
plot.roc(rs5[[1]])
sapply(2:length(rs5), function(i){lines.roc(rs5[[i]], col = i)})
dev.off()
#교차검증을 위한 테스트 데이터로 변경후 예측
confusionMatrix(te_res$n_category, te_res$pred_glm)
confusionMatrix(te_res$n_category, te_res$pred_rf)
confusionMatrix(te_res$n_category, te_res$pred_xgbt)
confusionMatrix(te_res$n_category, te_res$pred_rpart)
confusionMatrix(te_res$n_category, te_res$pred_nnet)
###############################
#       최종모델 선별         # -----
###############################
#실제 관측치를 얼마나 잘 반영하는지에 대한 통계치 recall과 모델의 예측 정확도를 판단하는 precision, 이 두 통계치를 동시에 판단하는 f1 score를 통해 모델 선택
prcs_m3 = c()
prcs_rf = c()
prcs_xgbt = c()
prcs_nnet = c()
prcs_rpart = c()
rcl_m3 = c()
rcl_rf = c()
rcl_xgbt = c()
rcl_nnet = c()
rcl_rpart = c()
for(i in 1:5){
cm_m3 <- confusionMatrix(te_res$n_category, te_res$pred_glm)
cm_rf <- confusionMatrix(te_res$n_category, te_res$pred_rf)
cm_xgbt <- confusionMatrix(te_res$n_category, te_res$pred_xgbt)
cm_nnet <- confusionMatrix(te_res$n_category, te_res$pred_nnet)
cm_rpart <- confusionMatrix(te_res$n_category, te_res$pred_rpart)
prcs_m3[i] <- cm_m3$table[i,i]/sum(cm_m3$table[i,])
prcs_rf[i] <- cm_rf$table[i,i]/sum(cm_rf$table[i,])
prcs_xgbt[i] <- cm_xgbt$table[i,i]/sum(cm_xgbt$table[i,])
prcs_nnet <- cm_nnet$table[i,i]/sum(cm_nnet$table[i,])
prcs_rpart <- cm_rpart$table[i,i]/sum(cm_rpart$table[i,])
rcl_m3[i] <- cm_m3$table[i,i]/sum(cm_m3$table[,i])
rcl_rf[i] <- cm_rf$table[i,i]/sum(cm_rf$table[,i])
rcl_xgbt[i] <- cm_xgbt$table[i,i]/sum(cm_xgbt$table[,i])
rcl_nnet[i] <- cm_nnet$table[i,i]/sum(cm_nnet$table[,i])
rcl_rpart[i] <- cm_rpart$table[i,i]/sum(cm_rpart$table[,i])
comparison_model <- data.frame(avg_precision_glm = mean(prcs_m3),
avg_precision_rf = mean(prcs_rf),
avg_precision_xgbt = mean(prcs_xgbt),
avg_precision_nnet = mean(prcs_nnet),
avg_precision_rpart = mean(prcs_rpart),
avg_recall_glm = mean(rcl_m3),
avg_recall_rf = mean(rcl_rf),
avg_recall_xgbt = mean(rcl_xgbt),
avg_recall_nnet = mean(rcl_nnet),
avg_recall_rpart = mean(rcl_rpart))
print(i)
}
comparison_model
f1_glm <- comparison_model$avg_precision_glm * comparison_model$avg_precision_glm
f1_rf <- comparison_model$avg_precision_rf * comparison_model$avg_recall_rf
f1_xgbt <- comparison_model$avg_precision_xgbt * comparison_model$avg_recall_xgbt
f1_nnet <- comparison_model$avg_precision_nnet * comparison_model$avg_recall_nnet
f1_rpart <- comparison_model$avg_precision_rpart * comparison_model$avg_recall_rpart
f1_glm
f1_rf
f1_xgbt
f1_nnet
f1_rpart
#f1 score가 더 높은 xg부스트를 최종 모델로 선정함
# xg 부스트 모형의 변수 중요도(10순위까지)
var_xgbt <- varImp(xgbt_rv)
var_dt <- data.frame(variance = rownames(var_xgbt$importance), impt = var_xgbt$importance)
rownames(var_dt) <- 1:nrow(var_dt)
colnames(var_dt) <- c("var", "impt")
var_dt <- var_dt[1:10,]
var_plot <- ggplot(var_dt, aes(x = reorder(var, -impt), y = impt, fill = var), colour = var) + geom_bar(stat = "identity") +
xlab("") + ylab("") + theme(axis.text.x=element_text(angle=40))
var_plot
#그림으로 저장
ggsave("03.Image/15.varplot.png", plot = var_plot, device = "png")
###############################
#    최종 모델을 통한 예측    # -----
###############################
#와이파이 미설치 지역에 사용량 예측
test_dt$n_xgbt <- predict(xgbt_rv, newdata = test_dt)
#예측된 결과를 파일로 저장
write.csv(test_dt, "01.Data/03.prediction_jn_wifi.csv", row.names = F)
rm(list = ls())
set.seed(333);options(stringsAsFactors = F)
# import Lib.
pkg_list <-
c('sf',
'raster',
'dplyr',
'readxl',
'gstat',
'data.table',
'lwgeom')
lapply(pkg_list, require, character.only = TRUE)
setwd('C:/Users/user/Desktop/dongdaemoon/01.Data/')
# 데이터 불러오기
youngchi <- read.csv('영치차량내역서(수정본).csv', encoding='cp949', fileEncoding = 'cp949')
chenap <- read.csv('체납자주소좌표.csv', encoding='cp949', fileEncoding = 'cp949')
carreg <- read.csv('차량등록현황_좌표추가.csv', encoding='cp949', fileEncoding = 'cp949')
cctv_fix <- read.csv('04_cctv_fix.csv', encoding='cp949', fileEncoding = 'cp949')
#cctv_fix_alarm <- read.csv('04-1_cctv_fix_alarm.csv', encoding='cp949', fileEncoding = 'cp949')
#cctv_fix_loc <- read.csv('04-2_cctv_fix_loc.csv', encoding='cp949', fileEncoding = 'cp949')
#cctv_road <- read.csv('05_cctv_road.csv', encoding='cp949', fileEncoding = 'cp949')
#cctv_road_loc <- read.csv('05-1_cctv_road_loc.csv', encoding='cp949', fileEncoding = 'cp949')
cctv_mov <- read.csv('06_cctv_mov.csv', encoding='cp949', fileEncoding = 'cp949')
yh <- read.csv('time_range.csv', encoding='cp949', fileEncoding = 'cp949')
names(yh) <- c("yh", "min_yc", "max_yc", "max_cn", "min_mov", "max_mov")
# 중요 컬럼 트리밍 처리
youngchi$car_num <- trimws(youngchi$car_num)
##### 예측시기값 부여
# 영치 데이터
youngchi$yh <- NA
ymd = as.integer(as.Date(youngchi$yungchi_date))
for (row in 1:nrow(yh)) {
youngchi$yh <- ifelse(ymd >= as.integer(as.Date(yh[row, 'min_yc']))
& ymd <= as.integer(as.Date(yh[row, 'max_yc'])), row, youngchi$yh)
}
# 체납 데이터
chenap$yh <- NA
ymd = as.integer(as.Date(chenap$yungchi_da))
for (row in 1:nrow(yh)) {
chenap$yh <- ifelse(ymd <= as.integer(as.Date(yh[row, 'max_cn'])),
ifelse(is.na(chenap$yh), row, chenap$yh), NA)
}
# 이동형 데이터
cctv_mov$yh <- NA
t = unclass(as.POSIXct(cctv_mov$단속일시))
for (row in 1:nrow(yh)) {
cctv_mov$yh <- ifelse(t >= unclass(as.POSIXct(yh[row, 'min_mov'])) &
t <= unclass(as.POSIXct(yh[row, 'max_mov'])), row, cctv_mov$yh)
}
##### 체납 + 영치 믹스업하여 데이터셋 생성 (cnyc)
chenap_yh <- chenap[!is.na(chenap$yh),]
youngchi_yh <- youngchi[!is.na(youngchi$yh),]
View(youngchi_yh)
View(chenap_yh)
cn_join_yc <- full_join(chenap_yh, youngchi_yh, 'id')
cnyc <- data.frame(
car_num=cn_join_yc$id,
adr_x=case_when(!is.na(cn_join_yc$lng) ~ cn_join_yc$lng, TRUE ~ cn_join_yc$X),
adr_y=case_when(!is.na(cn_join_yc$lat) ~ cn_join_yc$lat, TRUE ~ cn_join_yc$Y),
yh1=case_when(coalesce(cn_join_yc$yh.x, 0) >= 1 | cn_join_yc$yh.y == 1 ~ 1, TRUE ~ 0),
yh2=case_when(coalesce(cn_join_yc$yh.x, 0) >= 2 | cn_join_yc$yh.y == 2 ~ 1, TRUE ~ 0),
yh3=case_when(coalesce(cn_join_yc$yh.x, 0) >= 3 | cn_join_yc$yh.y == 3 ~ 1, TRUE ~ 0),
man=case_when(cn_join_yc$division.x == '남자' | cn_join_yc$division.y == '남자' ~ 1, TRUE ~ 0),
woman=case_when(cn_join_yc$division.x == '여자' | cn_join_yc$division.y == '여자' ~ 1, TRUE ~ 0))
View(cnyc)
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'adr_x')
View(carreg)
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'id')
carreg <- read.csv('차량등록현황_좌표추가.csv', encoding='cp949', fileEncoding = 'cp949')
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'adr_x')
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
View(carreg)
View(cnyc)
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
View(cnyc)
View(yh)
View(cn_join_yc)
##### 체납 + 영치 믹스업하여 데이터셋 생성 (cnyc)
chenap_yh <- chenap[!is.na(chenap$yh),]
youngchi_yh <- youngchi[!is.na(youngchi$yh),]
cn_join_yc <- full_join(chenap_yh, youngchi_yh, 'id')
cnyc <- data.frame(
car_num=cn_join_yc$id,
adr_x=case_when(!is.na(cn_join_yc$lng) ~ cn_join_yc$lng, TRUE ~ cn_join_yc$X),
adr_y=case_when(!is.na(cn_join_yc$lat) ~ cn_join_yc$lat, TRUE ~ cn_join_yc$Y),
yh1=case_when(coalesce(cn_join_yc$yh.x, 0) >= 1 | cn_join_yc$yh.y == 1 ~ 1, TRUE ~ 0),
yh2=case_when(coalesce(cn_join_yc$yh.x, 0) >= 2 | cn_join_yc$yh.y == 2 ~ 1, TRUE ~ 0),
# yh3=case_when(coalesce(cn_join_yc$yh.x, 0) >= 3 | cn_join_yc$yh.y == 3 ~ 1, TRUE ~ 0),
man=case_when(cn_join_yc$division.x == '남' | cn_join_yc$division.y == '남' ~ 1, TRUE ~ 0),
woman=case_when(cn_join_yc$division.x == '여' | cn_join_yc$division.y == '여' ~ 1, TRUE ~ 0))
View(cnyc)
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'adr_x')
View(cn_join_yc)
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
View(carreg)
View(cnyc)
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'adr_y')
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
View(cnyc_join_cr)
na.omit(cnyc_join_cr)
cnyc_join_cr = na.omit(cnyc_join_cr)
View(cnyc_join_cr)
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
unique(cnyc_join_cr)
cnyc_join_cr = unique(cnyc_join_cr)
View(cnyc_join_cr)
cnyc_join_cr = unique(cnyc_join_cr)
cnyc_join_cr %>% distinct(id, .keep_all = TRUE)
cnyc_join_cr = cnyc_join_cr %>% distinct(id, .keep_all = TRUE)
View(cnyc_join_cr)
cnyc_join_cr = cnyc_join_cr %>% distinct(car_num, .keep_all = TRUE)
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
cnyc <- data.frame(
car_num=cn_join_yc$id,
adr_x=case_when(!is.na(cn_join_yc$lng) ~ cn_join_yc$lng, TRUE ~ cn_join_yc$X),
adr_y=case_when(!is.na(cn_join_yc$lat) ~ cn_join_yc$lat, TRUE ~ cn_join_yc$Y),
yh1=case_when(coalesce(cn_join_yc$yh.x, 0) >= 1 | cn_join_yc$yh.y == 1 ~ 1, TRUE ~ 0),
yh2=case_when(coalesce(cn_join_yc$yh.x, 0) >= 2 | cn_join_yc$yh.y == 2 ~ 1, TRUE ~ 0),
# yh3=case_when(coalesce(cn_join_yc$yh.x, 0) >= 3 | cn_join_yc$yh.y == 3 ~ 1, TRUE ~ 0),
man=case_when(cn_join_yc$division.x == '남' | cn_join_yc$division.y == '남' ~ 1, TRUE ~ 0),
woman=case_when(cn_join_yc$division.x == '여' | cn_join_yc$division.y == '여' ~ 1, TRUE ~ 0))
cn_join_yc <- full_join(chenap_yh, youngchi_yh, 'id')
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'adr_y')
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
cnyc_join_cr
cnyc_join_cr = na.omit(cnyc_join_cr)
cnyc_join_cr = cnyc_join_cr %>% distinct(car_num, .keep_all = TRUE)
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'adr_y')
cnyc_join_cr = cnyc_join_cr %>% distinct(car_num, .keep_all = TRUE)
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
View(cnyc_join_cr)
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'adr_y')
#cnyc_join_cr = na.omit(cnyc_join_cr)
#cnyc_join_cr = unique(cnyc_join_cr)
cnyc_join_cr = cnyc_join_cr %>% distinct(id, .keep_all = TRUE)
#cnyc_join_cr = na.omit(cnyc_join_cr)
#cnyc_join_cr = unique(cnyc_join_cr)
#cnyc_join_cr = cnyc_join_cr %>% distinct(id, .keep_all = TRUE)
cnyc_join_cr = cnyc_join_cr %>% distinct(car_num, .keep_all = TRUE)
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'adr_y')
#cnyc_join_cr = na.omit(cnyc_join_cr)
#cnyc_join_cr = unique(cnyc_join_cr)
#cnyc_join_cr = cnyc_join_cr %>% distinct(id, .keep_all = TRUE)
cnyc_join_cr = cnyc_join_cr %>% distinct(car_num, .keep_all = TRUE)
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
##### 이동형 단속내역에서 예측시기별 체납자여부 값 및 오전/오후 컬럼 부여 (mov)
mov_join_cnyc <- left_join(cctv_mov, cnyc, 'car_num')
View(cctv_mov)
View(cnyc)
#cctv_fix_alarm <- read.csv('04-1_cctv_fix_alarm.csv', encoding='cp949', fileEncoding = 'cp949')
#cctv_fix_loc <- read.csv('04-2_cctv_fix_loc.csv', encoding='cp949', fileEncoding = 'cp949')
#cctv_road <- read.csv('05_cctv_road.csv', encoding='cp949', fileEncoding = 'cp949')
#cctv_road_loc <- read.csv('05-1_cctv_road_loc.csv', encoding='cp949', fileEncoding = 'cp949')
cctv_mov <- read.csv('06_cctv_mov.csv', encoding='cp949', fileEncoding = 'cp949')
##### 이동형 단속내역에서 예측시기별 체납자여부 값 및 오전/오후 컬럼 부여 (mov)
mov_join_cnyc <- left_join(cctv_mov, cnyc, 'car_num')
View(yh)
View(chenap_yh)
View(chenap_yh)
View(youngchi_yh)
View(chenap)
View(cn_join_yc)
##### 이동형 단속내역에서 예측시기별 체납자여부 값 및 오전/오후 컬럼 부여 (mov)
mov_join_cnyc <- left_join(cctv_mov, cnyc, 'id')
View(cnyc_join_cr)
chenap <- read.csv('자동차세 체납자료(동대문구만)_좌표추가.csv', encoding='cp949', fileEncoding = 'cp949')
# 중요 컬럼 트리밍 처리
youngchi$car_num <- trimws(youngchi$car_num)
chenap$car_num <- trimws(chenap$car_num)
carreg$car_num <- trimws(carreg$car_num)
cctv_mov$car_num <- trimws(cctv_mov$car_num)
cctv_fix$car_num <- trimws(cctv_fix$car_num)
cctv_fix_alarm$car_num <- trimws(cctv_fix_alarm$car_num)
cctv_road$car_num <- trimws(cctv_road$car_num)
youngchi$ymd <- trimws(youngchi$ymd)
chenap$ymd <- trimws(chenap$ymd)
cctv_mov$t <- trimws(cctv_mov$t)
cctv_fix$t <- trimws(cctv_fix$t)
cctv_fix_alarm$t <- trimws(cctv_fix_alarm$t)
##### 예측시기값 부여
# 영치 데이터
youngchi$yh <- NA
ymd = as.integer(as.Date(youngchi$yungchi_date))
for (row in 1:nrow(yh)) {
youngchi$yh <- ifelse(ymd >= as.integer(as.Date(yh[row, 'min_yc']))
& ymd <= as.integer(as.Date(yh[row, 'max_yc'])), row, youngchi$yh)
}
# 체납 데이터
chenap$yh <- NA
ymd = as.integer(as.Date(chenap$yungchi_da))
for (row in 1:nrow(yh)) {
chenap$yh <- ifelse(ymd <= as.integer(as.Date(yh[row, 'max_cn'])),
ifelse(is.na(chenap$yh), row, chenap$yh), NA)
}
# 이동형 데이터
cctv_mov$yh <- NA
t = unclass(as.POSIXct(cctv_mov$단속일시))
for (row in 1:nrow(yh)) {
cctv_mov$yh <- ifelse(t >= unclass(as.POSIXct(yh[row, 'min_mov'])) &
t <= unclass(as.POSIXct(yh[row, 'max_mov'])), row, cctv_mov$yh)
}
##### 체납 + 영치 믹스업하여 데이터셋 생성 (cnyc)
chenap_yh <- chenap[!is.na(chenap$yh),]
youngchi_yh <- youngchi[!is.na(youngchi$yh),]
cn_join_yc <- full_join(chenap_yh, youngchi_yh, 'id')
View(youngchi_yh)
View(chenap_yh)
# 체납 데이터
chenap$yh <- NA
ymd = as.integer(as.Date(chenap$yungchi_da))
chenap <- read.csv('체납자주소좌표.csv', encoding='cp949', fileEncoding = 'cp949')
# 체납 데이터
chenap$yh <- NA
ymd = as.integer(as.Date(chenap$yungchi_da))
for (row in 1:nrow(yh)) {
chenap$yh <- ifelse(ymd <= as.integer(as.Date(yh[row, 'max_cn'])),
ifelse(is.na(chenap$yh), row, chenap$yh), NA)
}
# 이동형 데이터
cctv_mov$yh <- NA
t = unclass(as.POSIXct(cctv_mov$단속일시))
for (row in 1:nrow(yh)) {
cctv_mov$yh <- ifelse(t >= unclass(as.POSIXct(yh[row, 'min_mov'])) &
t <= unclass(as.POSIXct(yh[row, 'max_mov'])), row, cctv_mov$yh)
}
##### 체납 + 영치 믹스업하여 데이터셋 생성 (cnyc)
chenap_yh <- chenap[!is.na(chenap$yh),]
youngchi_yh <- youngchi[!is.na(youngchi$yh),]
cn_join_yc <- full_join(chenap_yh, youngchi_yh, 'id')
cnyc <- data.frame(
car_num=cn_join_yc$id,
adr_x=case_when(!is.na(cn_join_yc$lng) ~ cn_join_yc$lng, TRUE ~ cn_join_yc$X),
adr_y=case_when(!is.na(cn_join_yc$lat) ~ cn_join_yc$lat, TRUE ~ cn_join_yc$Y),
yh1=case_when(coalesce(cn_join_yc$yh.x, 0) >= 1 | cn_join_yc$yh.y == 1 ~ 1, TRUE ~ 0),
yh2=case_when(coalesce(cn_join_yc$yh.x, 0) >= 2 | cn_join_yc$yh.y == 2 ~ 1, TRUE ~ 0),
# yh3=case_when(coalesce(cn_join_yc$yh.x, 0) >= 3 | cn_join_yc$yh.y == 3 ~ 1, TRUE ~ 0),
man=case_when(cn_join_yc$division.x == '남' | cn_join_yc$division.y == '남' ~ 1, TRUE ~ 0),
woman=case_when(cn_join_yc$division.x == '여' | cn_join_yc$division.y == '여' ~ 1, TRUE ~ 0))
#cnyc_join_cr = na.omit(cnyc_join_cr)
#cnyc_join_cr = unique(cnyc_join_cr)
#cnyc_join_cr = cnyc_join_cr %>% distinct(id, .keep_all = TRUE)
cnyc_join_cr = cnyc_join_cr %>% distinct(car_num, .keep_all = TRUE)
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'adr_y')
#cnyc_join_cr = na.omit(cnyc_join_cr)
#cnyc_join_cr = unique(cnyc_join_cr)
#cnyc_join_cr = cnyc_join_cr %>% distinct(id, .keep_all = TRUE)
cnyc_join_cr = cnyc_join_cr %>% distinct(car_num, .keep_all = TRUE)
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
View(cnyc_join_cr)
View(cnyc)
# 차종정보 결합
cnyc_join_cr <- left_join(cnyc, carreg, 'adr_y')
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
#cnyc_join_cr = na.omit(cnyc_join_cr)
cnyc_join_cr = unique(cnyc_join_cr)
cnyc_join_cr = cnyc_join_cr %>% distinct(id, .keep_all = TRUE)
cnyc_join_cr = cnyc_join_cr %>% distinct(id, .keep_all = TRUE)
cnyc_join_cr = cnyc_join_cr %>% distinct(car_num, .keep_all = TRUE)
cnyc <- cnyc %>% mutate(sy=case_when(cnyc_join_cr$cat == '승용' ~ 1, TRUE ~ 0),
sh=case_when(cnyc_join_cr$cat == '승합' ~ 1, TRUE ~ 0),
ts=case_when(cnyc_join_cr$cat == '특수' ~ 1, TRUE ~ 0),
hm=case_when(cnyc_join_cr$cat == '화물' ~ 1, TRUE ~ 0))
View(chenap)
View(youngchi)
View(carreg)
View(chenap)
